/* Generated By:JavaCC: Do not edit this line. RuleSetParser.java */
package ch.parren.jdepchk.rules.parser;

import java.util.*;
import ch.parren.jdepchk.rules.builder.*;

@SuppressWarnings("unused")//
class RuleSetParser implements RuleSetParserConstants {

        RuleSetBuilder builder;

  final public void ruleSet() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
      case 12:
      case 13:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        scope();
        break;
      case 12:
        lib();
        break;
      case 13:
        comp();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  final public void scope() throws ParseException {
                String name;
                ScopeBuilder scope;
    jj_consume_token(9);
    name = id();
                          scope = builder.scope(name);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 10:
      case 11:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      scopeBody(scope);
    }
  }

  final public void scopeBody(ScopeBuilder scope) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 10:
      jj_consume_token(10);
      filters(scope.containsFilters());
      break;
    case 11:
      jj_consume_token(11);
      filters(scope.allowsFilters());
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void lib() throws ParseException {
                String name;
                ComponentBuilder comp;
    jj_consume_token(12);
    name = id();
                          comp = builder.lib(name);
    compBody(comp);
  }

  final public void comp() throws ParseException {
                String name;
                ComponentBuilder comp;
    jj_consume_token(13);
    name = id();
                          comp = builder.comp(name);
    compBody(comp);
  }

  final public void compBody(ComponentBuilder comp) throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 14:
        jj_consume_token(14);
        ext(comp);
        break;
      case 15:
        jj_consume_token(15);
        use(comp);
        break;
      case 10:
      case 11:
        scopeBody(comp);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 10:
      case 11:
      case 14:
      case 15:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
    }
  }

  final public void ext(ComponentBuilder comp) throws ParseException {
                String name;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        jj_consume_token(16);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      name = id();
                          comp.extend(name);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Id:
      case 16:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
    }
  }

  final public void use(ComponentBuilder comp) throws ParseException {
                String name;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        jj_consume_token(16);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      name = id();
                          comp.use(name);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Id:
      case 16:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
    }
  }

  final public void filters(Collection<FilterBuilder> filters) throws ParseException {
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        jj_consume_token(16);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      filter(filters);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Id:
      case 16:
      case 17:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
    }
  }

  final public void filter(Collection<FilterBuilder> filters) throws ParseException {
                FilterBuilder filter;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Id:
      filter = spec();
      break;
    case 17:
      jj_consume_token(17);
      filter = spec();
                                  filter = filter.not();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                          filters.add(filter);
  }

  final public FilterBuilder spec() throws ParseException {
                String glob;
    glob = id();
                          {if (true) return builder.glob(glob);}
    throw new Error("Missing return statement in function");
  }

  final public String id() throws ParseException {
    jj_consume_token(Id);
                          {if (true) return token.image;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public RuleSetParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3200,0x3200,0xc00,0xc00,0xcc00,0xcc00,0x10000,0x10100,0x10000,0x10100,0x10000,0x30100,0x20100,};
   }

  /** Constructor with InputStream. */
  public RuleSetParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RuleSetParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RuleSetParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public RuleSetParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RuleSetParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RuleSetParser(RuleSetParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RuleSetParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[18];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 18; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
