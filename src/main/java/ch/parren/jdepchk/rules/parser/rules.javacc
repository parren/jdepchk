/* JavaCC syntax definition for .jdep rules files. */

options
	{
		STATIC = false;
	}

PARSER_BEGIN(RuleSetParser)
package ch.parren.jdepchk.rules.parser;

import java.util.*;
import java.util.regex.*;
import ch.parren.jdepchk.rules.builder.*;

@SuppressWarnings("unused")//
class RuleSetParser {

	RuleSetBuilder builder;

}
PARSER_END(RuleSetParser)


SKIP: { " " | "\t" | "\n" | "\r" }

SPECIAL_TOKEN: /* COMMENTS */
	{	<SHELL_COMMENT: "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
	|	<SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
	|	<MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
	}

TOKEN:
	{	< Def: "def" >
	|	< Rule: "rule" >
	|	< Scope: "scope" > // deprecated
	|	< Lib: "lib" >
	|	< Comp: "comp" >
	|	< Contains: "contains" >
	|	< AppliesTo: "applies-to" >
	|	< Allows: "allows" >
	|	< Extends: "extends" >
	|	< Uses: "uses" >
	|	< Except: "except" >
	|	< End: "end" >
	|	< This: "this" >
	|	< Not: "!" >
	|	< Intro: ":" > // optionally separates arguments from names
	|	< Bullet: "-" > // supports YAMLish multiple elts
	|	< Id: ( ["a"-"z","A"-"Z","0"-"9", ".", "*", "$", "-", "_"] )+ >
	|	< RegExp: "^" ( ~["$"] | "$$" )* "$" >
	}

void ruleSet():
	{}
	{
		(	def()
		|	rule()
		|	lib()
		|	comp()
		)*
		<EOF>
	}

void def():
	{
		String name;
		String value;
	}
	{
		<Def> [<Intro>] name=id() "=" value=id()
			{ builder.define(name, value); }
	}

void rule():
	{
		String name;
		ScopeBuilder scope;
	}
	{
		(<Rule> | <Scope>) [<Intro>] name=id()
			{ scope = builder.scope(name); }
		(	scopeBody(scope) )*
	}

void scopeBody(ScopeBuilder scope):
	{}
	{
			(<Contains> | <AppliesTo>) [<Intro>] filters(scope.containsFilters())
		|	<Allows> [<Intro>] filters(scope.allowsFilters())
	}

void lib():
	{
		String name;
		ComponentBuilder comp;
	}
	{
		<Lib> [<Intro>] name=id()
			{ comp = builder.lib(name); }
		compBody(comp)
	}

void comp():
	{
		String name;
		ComponentBuilder comp;
	}
	{
		<Comp> [<Intro>] name=id()
			{ comp = builder.comp(name); }
		compBody(comp)
		excepts(comp)
	}

void compBody(ComponentBuilder comp):
	{}
	{
		(	<Extends> [<Intro>] ext(comp)
		|	<Uses> [<Intro>] use(comp)
		|	scopeBody(comp)
		)*
	}

void ext(ComponentBuilder comp):
	{
		String name;
	}
	{
		(	[<Bullet>] name=id()
			{ comp.extend(name); }
		)+
	}

void use(ComponentBuilder comp):
	{
		String name;
	}
	{
		(	[<Bullet>] name=id()
			{ comp.use(name); }
		)+
	}

void excepts(ComponentBuilder comp):
	{}
	{
		(	<Except> [<Intro>] except(comp)
		)*
	}

void except(ComponentBuilder comp):
	{
		String name;
		ComponentBuilder exception;
	}
	{
		name=id()
			{ exception = comp.except(name); }
		compBody(exception)
	}

void filters(Collection<FilterBuilder> filters):
	{}
	{
		( [<Bullet>] filter(filters) )+
	}

void filter(Collection<FilterBuilder> filters):
	{
		FilterBuilder filter;
	}
	{
		(	filter=spec()
		|	<Not> filter=spec()
				{ filter = filter.not(); }
		)
			{ filters.add(filter); }
	}

FilterBuilder spec():
	{
		String re;
		String glob;
	}
	{
		<This>
			{ return builder.selfref(); }
	|	re=re()
			{ return builder.pattern(Pattern.compile(re)); }
	|	glob=id()
			{ return builder.glob(glob); }
	}

String id():
	{}
	{
		<Id>
			{ return builder.subst(token.image); }
	}

String re():
	{}
	{
		<RegExp>
			{ return builder.subst(token.image); }
	}
