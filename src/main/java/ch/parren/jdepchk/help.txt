NAME
    jdepchk - checks JVM classes for conformance to dependency rules

SYNOPSIS
    jdepchk [OPTION]...

DESCRIPTION
    Scans class files in dirs, .jar files, or dirs with .jar files for
    dependencies on other classes and verifies the latter against a set of
    rules.

    -r, --rules FILENAME | DIRNAME | DIRNAME/*/
        Loads rule definitions from the given file, or from all files in the
        given dir, except files whose name starts with a period, or from all
        files in all subdirs of the given dir, except subdirs whose name
        starts with a period.

        Unless preceded by a --ruleset argument, the rules are parsed into a
        new rule namespace, which uses the argument as its name. Otherwise the
        rules are added to the namespace introduced by the --ruleset argument.

        See below for examples of rule definitions.

    --rule-set NAME
        Introduces a new rule set, which contains all subsequent --rule
        arguments, until the next --ruleset argument. This is mainly used to
        group rules extracted from annotations with their base rule
        definitions.

    -c, --classes DIRNAME
        Scans .class files in the given directory and all its subdirectories.
        You will typically use this for javac's output dirs.

    -j, --jar, --jars DIRNAME
        Scans .jar files in the given directory, then scans all the .class
        files contained within the .jar files found. You will typically use
        this to verify rules against the final result of builds. 

    -j, --jar, --jars FILENAME
        Scans all the .class files contained within the .jar given file. You
        will typically use this to verify rules against the final result of
        builds. 

    -e, --extract-annotations
        Enables extraction of additional rule files from annotations
        in the code. These are maintained in the dirs specified via --local
        and --global.

    -l, --local-rules DIRNAME
    -g, --global-rules DIRNAME
        Updates local/global rule definition files extracted from annotations
        in the given dir. Files are created, updated and deleted (!) as
        necessary.

    -a, --auto-recheck
        Automatically re-runs a pure check run if any of the extracted rule
        files changed.

    --no-check
        Disables checking classes against the dependency rules.
        You typically disable checks when you want to only extract rules.

    --scope NAME
        Introduces a new "scope". JDepChk can run checks with different
        rule configurations on different class paths. Paths and rules are
        grouped into scopes for this purpose. All the options above apply
        to the current scope only.

    -f, --config-file FILENAME
        Reads arguments from the given file. The format of the file is
        identical to the one used by EDepChk, the Eclipse plugin for JDepChk
        (see below for details).

    --jobs N
        Runs at most N jobs in parallel. Relevant only if you are scanning
        multiple class dirs or jar files. Default is double the number of
        available processors.

    --show-rules
        Lists all the low-level rules in effect after parsing the rule files.
        In particular, this shows how component-based rules are implemented as
        low-level rules by JDepChk.

    --show-stats
        Shows information about number of classes inspected, and some other
        details.

EXIT CODES

    0   if no extracted rule files changed and no violations were encountered.
    1   if no extracted rule files changed, but there were rule violations.
    2   if any extracted rule file changed.
    9   if a severe error occurred.

CONFIG FILES
    Configuration files list options for JDepChk and related tools like
    EDepChk. 

    Line breaks and white space separate arguments. Whitespace followed by
    a # sound introduces a comment until the end of the line and is ignored.
    
    Unlike with options parsed from the command line, lines starting with an
    unknown option are silently ignored (to support options known only to
    either of the tools).  

    An example without annotation extraction, but multiple scopes:

        --scope main
          --classes temp/classes/main/
          --classes temp/classes/generated/
          --rules src/common.jdep
          --rules src/main.jdep
        --scope test
          --classes temp/classes/tests/
          --rules src/common.jdep
          --rules src/tests.jdep

    An example with annotation extraction:

        --max-errors 50  # applies to EDepChk only
        --scope main  # not strictly necessary here; we have only one scope
          --classes temp/classes/main/
          --classes temp/classes/generated/
          --extract-annotations
          --local-rules temp/rules/local/main/ # extract local rules here
          --global-rules temp/rules/global/main/ # extract global rules here
          --rule-set local
            --rules temp/rules/local/main/    # extracted rules
            --rules src/local/base-rules.jdep # base rules defined manually
          --rule-set global
            --rules temp/rules/global/*/      # extracted rules across modules

RULE FILES
    Rules files contain rule definitions. Please refer to the documentation in
    index.html for details. A couple of quick examples:

        def $abbrev = com.example.some.long.base.package
        lib $default contains java.lang.** java.util.**
        lib java.io.**
        lib javax.xml.** contains org.w3c.**
        lib javax.swing.** contains java.awt.**
        comp $abbrev.core.**
            uses: // colons after keywords are optional
                - java.io // YAML-style dashes are optional
                - java.xml
        comp $abbrev.ui.**
            extends $abbrev.core
            uses javax.swing
            allows:
                java.io.IOException
                ! java.lang.StringBuffer // use StringBuilder instead
